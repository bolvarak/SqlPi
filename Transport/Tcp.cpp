/////////////////////////////////////////////////////////////////////////////////////////
/// Headers ////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////

#include "Tcp.hpp"

/////////////////////////////////////////////////////////////////////////////////////////
/// SqlPi Namespace ////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////

namespace SqlPi
{
	/////////////////////////////////////////////////////////////////////////////////////
	/// SqlPi::Transport Namespace /////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////////////

	namespace Transport
	{
		/////////////////////////////////////////////////////////////////////////////////
		/// Constructor ////////////////////////////////////////////////////////////////
		///////////////////////////////////////////////////////////////////////////////

		Tcp::Tcp(QObject* qoParent) : Server(), QTcpServer(qoParent)
		{
			// Make the new client connection
			this->connect(this, SIGNAL(newConnection()), this, SLOT(client()));
		}

		/////////////////////////////////////////////////////////////////////////////////
		/// Public Abstract Implementations ////////////////////////////////////////////
		///////////////////////////////////////////////////////////////////////////////

		void Tcp::await()
		{
			// Try to start the server
			if (!this->listen(Process::Configuration::getBindAddress(), Process::Configuration::getBindPort())) {
				// We're done send the error
				emit this->error(this->errorString(), 500);
			}
		}

		/////////////////////////////////////////////////////////////////////////////////
		/// Public Slot Abstract Implementations ///////////////////////////////////////
		///////////////////////////////////////////////////////////////////////////////

		void Tcp::client()
		{
			// Instantiate the new client
			Connection::Client* conClient = new Connection::Client(this);
			// Set the socket descriptor
			conClient->setSocket(this->nextPendingConnection());
		}

		void Tcp::shutdown()
		{

		}

	/////////////////////////////////////////////////////////////////////////////////////
	} /// End SqlPi::Transport Namespace ///////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////
} /// End SqlPi Namespace //////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////
