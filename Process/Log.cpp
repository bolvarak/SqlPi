/////////////////////////////////////////////////////////////////////////////////////////
/// Headers ////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////

#include "Log.hpp"

/////////////////////////////////////////////////////////////////////////////////////////
/// SqlPi Namespace ////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////

namespace SqlPi
{
	/////////////////////////////////////////////////////////////////////////////////////
	/// SqlPi::Process Namespace ///////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////////////

	namespace Process
	{
		/////////////////////////////////////////////////////////////////////////////////
		/// Protected Static Properties ////////////////////////////////////////////////
		///////////////////////////////////////////////////////////////////////////////

		QString Log::mDestination = "stdout";

		/////////////////////////////////////////////////////////////////////////////////
		/// Protected Static Methods ///////////////////////////////////////////////////
		///////////////////////////////////////////////////////////////////////////////

		void Log::writeToFile(QString strMessage)
		{
			// Create the log message
			QString strOutput = QString("[SqlPi][%1]%2\n").arg(QDateTime::currentDateTime().toString(Qt::RFC2822Date), strMessage);
			// Check for a destination
			if (mDestination.isNull() || mDestination.isEmpty()) {
				// Reset the destination
				mDestination = "stdout";
				// Return the standard write
				return writeToStd(strMessage);
			}
			// Create the file handle
			QFile fleOutput(mDestination);
			// Open the file
			if (!fleOutput.open(QFile::Append)) {
				// Reset the destination
				mDestination = "stdout";
				// Log the error
				return error("Unable to open log file.  Falling back to std.");
			}
			// Write the log entry
			fleOutput.write(strOutput.toLatin1());
			// Close the file
			fleOutput.close();
		}

		void Log::writeToStd(QString strMessage)
		{
			// Create the log message
			QString strOutput = QString("[SqlPi][%1]%2").arg(QDateTime::currentDateTime().toString(Qt::RFC2822Date), strMessage);
			// Write the entry
			std::cerr << strOutput.toStdString() << std::endl;
		}

		/////////////////////////////////////////////////////////////////////////////////
		/// Public Static Methods //////////////////////////////////////////////////////
		///////////////////////////////////////////////////////////////////////////////

		void Log::addEntry(QString strLevel, QString strMessage)
		{
			// Create the message template
			QString strOutputMessage = QString("[%2]\t%3").arg(strLevel, strMessage.trimmed());
			// Check for stdout as the output
			if (mDestination.toLower() != "stdout") {
				// Write the log entry
				return writeToFile(strOutputMessage);
			} else {
				// Write the log entry
				return writeToStd(strOutputMessage);
			}
		}

		void Log::debug(QString strMessage)
		{
			// Log the entry
			return addEntry("Debug", strMessage);
		}

		void Log::error(QString strMessage)
		{
			// Log the entry
			return addEntry("Error", strMessage);
		}

		void Log::fatal(QString strMessage)
		{
			// Log the entry
			return addEntry("Fatal", strMessage);
		}

		void Log::notice(QString strMessage)
		{
			// Log the entry
			return addEntry("Notice", strMessage);
		}

		void Log::warning(QString strMessage)
		{
			// Log the entry
			return addEntry("Warning", strMessage);
		}

		/////////////////////////////////////////////////////////////////////////////////
		/// Static Getters /////////////////////////////////////////////////////////////
		///////////////////////////////////////////////////////////////////////////////

		QString Log::getDestination()
		{
			// Return the destination from the instance
			return mDestination;
		}

		/////////////////////////////////////////////////////////////////////////////////
		/// Static Setters /////////////////////////////////////////////////////////////
		///////////////////////////////////////////////////////////////////////////////

		void Log::setDestination(QString strDestination)
		{
			// Check the destination
			if (strDestination.trimmed().toLower() != "stdout") {
				// Set the destination into the instance
				mDestination = strDestination.trimmed();
			} else {
				// Set the destination
				mDestination = "stdout";
			}
		}

	/////////////////////////////////////////////////////////////////////////////////////
	} /// End SqlPi::Process Namespace /////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////
} /// End SqlPi Namespace //////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////
